var invariant = require('invariant');
var url_1 = require('url');
var path_1 = require('path');
var config_1 = require('./config');
var path_2 = require('./path');
function gitFromPathname(pathname) {
    var segments = pathname.substr(1).split('/');
    var repo = segments.shift();
    var path = segments.join('/');
    if (segments.length === 0) {
        path = config_1.CONFIG_FILE;
    }
    else if (!path_2.isDefinition(path) && segments[segments.length - 1] !== config_1.CONFIG_FILE) {
        path += "/" + config_1.CONFIG_FILE;
    }
    return { repo: repo, path: path };
}
function shaFromHash(hash) {
    return hash ? hash.substr(1) : 'master';
}
function parseDependency(raw) {
    var parsedurl = url_1.parse(raw);
    var protocol = parsedurl.protocol, auth = parsedurl.auth, hostname = parsedurl.hostname, pathname = parsedurl.pathname, hash = parsedurl.hash;
    if (protocol === 'file:') {
        var location_1 = path_1.normalize(pathname);
        var filename = path_1.basename(location_1);
        invariant(filename === config_1.CONFIG_FILE || path_2.isDefinition(filename), "Only \".d.ts\" files and \"" + config_1.CONFIG_FILE + "\" are supported");
        return {
            raw: raw,
            type: 'file',
            location: location_1
        };
    }
    if (protocol === 'github:') {
        var sha = shaFromHash(hash);
        var _a = gitFromPathname(pathname), repo = _a.repo, path = _a.path;
        return {
            raw: raw,
            type: 'hosted',
            location: "https://raw.githubusercontent.com/" + hostname + "/" + repo + "/" + sha + "/" + path
        };
    }
    if (protocol === 'bitbucket:') {
        var sha = shaFromHash(hash);
        var _b = gitFromPathname(pathname), repo = _b.repo, path = _b.path;
        return {
            raw: raw,
            type: 'hosted',
            location: "https://bitbucket.org/" + hostname + "/" + repo + "/raw/" + sha + "/" + path
        };
    }
    if (protocol === 'npm:') {
        var scoped = auth === '';
        var parts = pathname ? pathname.substr(1).split('/') : [];
        var name_1 = hostname;
        if (scoped) {
            name_1 = "@" + hostname + "/" + parts.shift();
        }
        return {
            raw: raw,
            type: 'npm',
            location: path_1.normalize(name_1 + '/' + (parts.length ? parts.join('/') : 'package.json'))
        };
    }
    if (protocol === 'bower:') {
        return {
            raw: raw,
            type: 'bower',
            location: path_1.normalize(hostname + (pathname || '/bower.json'))
        };
    }
    if (protocol === 'http:' || protocol === 'https:') {
        return {
            raw: raw,
            type: 'hosted',
            location: url_1.format(parsedurl)
        };
    }
    throw new TypeError("Unsupported dependency: " + raw);
}
exports.parseDependency = parseDependency;
//# sourceMappingURL=parse.js.map